[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Genehackers iGEM Wiki Guide",
    "section": "",
    "text": "Preface\n\n“Any application that can be written in JavaScript, will eventually be written in JavaScript.” – Jeff Atwood (a.k.a. Atwood’s Law)\n\nFor this wiki, we will be using React (JavaScript Library) for the user-interface layer and Tailwind CSS for styling. Here is a simplified version of what our directory will look like.\n\n/📂 src\n   ├─ 📂 components   # Shared React components\n   ├─ 📂 pages        # Top-level wiki pages\n   ├─ 📂 styles       # Tailwind config & global styles\n   └─ 📂 assets       # Images, icons, and other static files\n/📂 public            # Compiled output served by the wiki host\nNote: Standard directory for reference (not wiki directory).\n\nTimeline\n🚀 Current timeline for completing wiki: June 16 – September 14, 2025.\n\nWeek 0 ( – June 16)\n\nSetup Github repository\n\nWeek 1 (June 16 – June 22)\n\nPlan: outline wiki information architecture\nAgree on style guide (colors, typography, nav)\nWorkshops on JavaScript, HTML, React + Tailwind\nOutline wiki design on Figma.\n\nWeek 2 (June 23 – June 29)\n\nOutline wiki design on Figma (continue)\nBuild landing‐page layout in React\n\nConfigure Tailwind & global styles\n\nWeek 3 (June 30 – July 6)\n\nImplement main nav & footer components\nDraft “Home” and “Team” page\n\nWeek 4 (July 7 – July 13)\n\nDraft “Home” and “Team” page (continue)\n\nWeek 5 (July 14 – July 20)\n\nDraft “Human Practices” page (continue)\nCollect initial lab notebook entries\n\nWeek 6 (July 21 – July 27)\n\nDraft “Human Practices” page (continue)\n\nWeek 7 (July 28 – August 3)\n\nDraft “Dry‑Lab” page\n\nEmbed interactive diagrams (three.js) (maybe)\n\nWeek 8 (August 4 – August 10)\n\nDraft “Dry‑Lab” page (continue)\n\nWeek 9 (August 11 – August 17)\n\nDraft “Wet‑Lab” page\n\nWeek 10 (August 18 – August 24)\n\nDraft “Wet‑Lab” page (continue)\nProofread all pages\n\nGenerate PDF snapshot (if required)\n\nWeek 11 (August 25 – August 31)\n\nDraft “Wet‑Lab” page (continue)\nFinish References & Acknowledgments pages\n\nWeek 12 (September 1 – September 7)\n\nProofread all pages.\nLight/dark theme toggle (optional)\n\nWeek 13 (September 8 – September 14)\n\nSubmit wiki before deadline\nImplement non-essential components\nCelebrate 🎉\n\nWeek 14, 15, etc. (September 14 – iGEM Competition)\n\nAdd last-minute information/tweaks\nImplement non-essential components (continue)",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "repo-setup.html",
    "href": "repo-setup.html",
    "title": "1  Repository Setup",
    "section": "",
    "text": "1.1 Introduction to Git\nLike in many of the computer science (CS) classes, we will be using a system called Git to manage our code. You can think of Git as a system for tracking changes to your code, storing your code on a remote server, sharing it with other developers, etc. This system is necessary for working collaboratively with others.\nMore specifically, Git is a version control system that tracks your files and changes you made to those files. This allows you to group a set of related changes together – adding a feature, fixing a bug, etc. – into a single commit (i.e. a new checkpoint). You can think of a commit as a checkpoint that represents everything made since the last checkpoint. By commiting (“saving checkpoints”), it makes it possible to revert to older versions of a file (or collections of files) by going back to an older “checkpoint” that you committed. These commits along with your actual files make up your repository, which tracks all changes made to files in your project.\nRead this if you have questions: UChicago CS Student Resource Guide.\nNow, the difference between Git and Github is that Git lives on your personal machine while GitHub is a cloud-based home where those Git repositories live. GitHub is necessary for sharing your code with your teammates and instructors.\nNote: You can think of Git as the local diary of your project and GitHub as the shared library where everyone can read and contribute to that diary.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Repository Setup</span>"
    ]
  },
  {
    "objectID": "repo-setup.html#introduction-to-git",
    "href": "repo-setup.html#introduction-to-git",
    "title": "1  Repository Setup",
    "section": "",
    "text": "Role\nGit (local)\nGitHub (remote)\n\n\n\n\nScope\nTracks versions of files on your computer\nHosts copies of repositories on the cloud\n\n\nPrimary job\nCreate commits, manage branches, inspect history\nStore, back-up, and enable collaborations via Pull Requests, Issues, Actions, etc.\n\n\nTypical commands\ngit add, git commit, git branch, git log\ngit push, git pull, git clone &lt;URL&gt;  (Git commands that talk to GitHub)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Repository Setup</span>"
    ]
  },
  {
    "objectID": "repo-setup.html#cloning-repository",
    "href": "repo-setup.html#cloning-repository",
    "title": "1  Repository Setup",
    "section": "1.2 Cloning Repository",
    "text": "1.2 Cloning Repository\ngit clone https://gitlab.igem.org/2025/uchicago\ncd uchicago\nbrew install yarn\nnpm install -g yarn",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Repository Setup</span>"
    ]
  },
  {
    "objectID": "react-tailwind.html",
    "href": "react-tailwind.html",
    "title": "2  React + Tailwind",
    "section": "",
    "text": "2.1 Overview\nAs stated previously in the Preface, this wiki will use React (JavaScript Library) for the user-interface layer and Tailwind CSS for styling. You can think of React as a declaritive “state -&gt; UI” engine. Rather than issuing step-by-step DOM (Document Object Model) commands (“create a &lt;div&gt;, set a text, append it here…”), you instead describe what the interface should look like for a given state. Here is essentially what React does:\nThis approach lets you treat each piece as an independent, reusable component. Each component recieves data (state) and React handles the rest. Here is an example of an implementation with HTML + Javascript and React.\nHTML + Javascript\nHow it works?\nReact\nWhat changed?\nTailwind CSS, in turn, gives you a bunch of utility classes (flex, bg-indigo-500, p-4, rounded-lg), which are essentially predefined CSS rules that tailwind ships for you. Instead of having to write CSS files from scratch, you have “pre-made CSS” building blocks. Here is a comparison if you were to write them both in a CSS file:\nTailwind\nNormal CSS\nNote: Tailwind essentially streamlines the code (less-verbose).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>React + Tailwind</span>"
    ]
  },
  {
    "objectID": "react-tailwind.html#overview",
    "href": "react-tailwind.html#overview",
    "title": "2  React + Tailwind",
    "section": "",
    "text": "Builds an in-memory snapshot of the UI (the virtual DOM).\nDiffs it against the previous snapshot.\nApplies only the minimal DOM changes needed.\n\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;title&gt;Click counter&lt;/title&gt;\n  &lt;style&gt;\n    button { font-size: 1rem; padding: 0.5rem 1rem; }\n    p      { font-family: sans-serif; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;p&gt;You clicked &lt;span id=\"count\"&gt;0&lt;/span&gt; times.&lt;/p&gt;\n  &lt;button id=\"btn\"&gt;Click me&lt;/button&gt;\n\n  &lt;script&gt;\n    // grab elements\n    const btn   = document.getElementById('btn');\n    const count = document.getElementById('count');\n    let clicks  = 0;\n\n    // attach event listener\n    btn.addEventListener('click', () =&gt; {\n      clicks += 1;          // update state\n      count.textContent = clicks; // update DOM manually\n    });\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nYou manipulate the DOM directly (getElementById, .textContent).\nState (clicks) lives outside the DOM and must stay in sync by hand.\n\n// DOM manipulation\n\n    btn.addEventListener('click', () =&gt; {\n      clicks += 1;          // update state\n      count.textContent = clicks; // update DOM manually\n    });\n\n// index.html\n&lt;body&gt;\n  &lt;div id=\"root\"&gt;&lt;/div&gt;\n  &lt;script type=\"module\" src=\"/src/index.jsx\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n\n// src/index.jsx\nimport { useState } from \"react\";\n\nexport default function Counter() {\n  const [clicks, setClicks] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {clicks} times.&lt;/p&gt;\n      &lt;button onClick={() =&gt; setClicks(clicks + 1)}&gt;\n        Click me\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\ncreateRoot(document.getElementById(\"root\")).render(&lt;Counter /&gt;);\n\n\nThe click return variable becomes a declaritive description of what the UI (user interface) should look like in its current state.\nCalling setClicks triggers React’s diff-and-patch cycle, turning the new description into the actual DOM.\nIMPORTANT: you could drop &lt;Counter /&gt; in multiple places and each gets isolated state (make multiple, independent copies).\n\n\n\n.my-element {\n    @apply flex bg-blue-600 text-white p-4 rounded-lg;\n}\n\n.my-element {\n  display: flex;\n  background-color: #2563eb;\n  color: #ffffff;\n  padding: 1rem;                 /* p-4 */\n  border-radius: 0.5rem;         /* rounded-lg */\n}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>React + Tailwind</span>"
    ]
  }
]