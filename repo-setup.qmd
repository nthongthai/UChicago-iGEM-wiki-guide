---
title: "Repository Setup"
---

## Introduction to Git

Like in many of the computer science (CS) classes, we will be using a system called Git to manage our code. You can think of Git as a system for tracking changes to your code, storing your code on a remote server, sharing it with other developers, etc. This system is necessary for working collaboratively with others.

More specifically, Git is a version control system that tracks your files and changes you made to those files. This allows you to group a set of related changes together -- adding a feature, fixing a bug, etc. -- into a single **commit** (i.e. a new checkpoint). You can think of a commit as a checkpoint that represents everything made since the last checkpoint. By commiting ("saving checkpoints"), it makes it possible to revert to older versions of a file (or collections of files) by going back to an older "checkpoint" that you committed. These commits along with your actual files make up your **repository**, which tracks all changes made to files in your project.

*Read this if you have questions:* [UChicago CS Student Resource Guide](https://uchicago-cs.github.io/student-resource-guide/).

Now, the difference between Git and Github is that Git lives on your personal machine while GitHub is a cloud-based home where those Git repositories live. GitHub is necessary for sharing your code with your teammates and instructors.

| Role                 | Git (local)                                      | GitHub (remote)                                                                          |
|----------------------|--------------------------------------------------|------------------------------------------------------------------------------------------|
| **Scope**            | Tracks versions of files on your computer        | Hosts *copies* of repositories on the cloud                                              |
| **Primary job**      | Create commits, manage branches, inspect history | Store, back-up, and enable collaborations via Pull Requests, Issues, Actions, etc.       |
| **Typical commands** | `git add`, `git commit`, `git branch`, `git log` | `git push`, `git pull`, `git clone <URL>` <br> *(Git commands that talk **to** GitHub)*  |

*Note.* You can think of Git as the local diary of your project and GitHub as the shared library where everyone can read and contribute to that diary.

## Prepping to use GitHub

### Creating a GitHub Account

*Important.* This is not required since we use our iGEM account to login. Here is where our repository is located: [iGEM UChicago Repository](https://gitlab.igem.org/2025/uchicago). Login to proceed to the next step. If you do not have access, make sure to join the team roster! Note that we will be using **GitLab**, which performs the same functionality as **GitHub**.

*Optional.* If you want to make your own account, you can get a GitHub account [here](https://github.com/join). You can choose any GitHub account name as long as it is not taken yet.

### Personal Access Token

To edit (`git push`) the online repository, you need to make a *personal access token* (PAT). A PAT is a random-looking string that you generate on a Git hosing server (GitHub, **GitLab**, etc.) to use in place of a password when you authenticate over HTTPS (HyperText Transfer Protocol Secure). DO NOT SHARE YOUR PERSONAL ACCESS TOKEN!

1. Go to "Settings" (If you can't find Settings, click on Preferences; will take you to the same location).
2. Go to "Access Tokens".
3. Click on "Add new Token".
4. Choose your "Token Name" of your choosing.
5. (Optional) Add description to "Token description".
6. Select only "api" for "Select Scopes".
7. Click "Create personal access token".
8. Copy "Your new personal access token". SAVE IT FOR LATER STEPS!

Your personal access token should look like a random string of letters and digits (Example. `qOWqceAnzAXcQjD0Lt8N`). This will be later used to give you access to the repository.

## Cloning Repository

```bash
git clone https://gitlab.igem.org/2025/uchicago
cd uchicago
```

```bash
brew install yarn
```

```bash
npm install -g yarn
```